@using Blazored.LocalStorage
@using IgbDockManagerDemo.Services
@implements IAsyncDisposable
@inject ILocalStorageService LocalStorage
@inject DockManagerHelper Helper

<div class="container">

    <!-- ドックマネージャー -->
    <IgbDockManager id="dockmanager1" Layout="this._InitialLayout" Width="800px" Height="400px">
        @foreach (var descriptor in this._Components)
        {
            // デスクリプタで指定されたコンポーネント名から、対応するコンポーネントの型を表引き
            var typeOfComponent = _ComponentNameToType[descriptor.ComponentName];

            <div @key="descriptor.Id" slot="@descriptor.Id">
                <DynamicComponent Type="typeOfComponent" Parameters="descriptor.Parameters" />
            </div>
        }
    </IgbDockManager>

    <!-- "Counter" コンポーネントを追加するボタン -->
    <div class="container">
        <IgbButton @onclick="OnClickAddCounter">Add Counter</IgbButton>
    </div>

    <!-- "TextMessage" コンポーネントに表示するメッセージの入力欄と追加するボタン -->
    <div class="container">
        <IgbInput @bind-Value="this._Message" InputOcurred="@(e => this._Message = e.Detail)" />
        <div class="container">
            <IgbButton @onclick="OnClickAddTextMessage" Disabled="@(this._Message == "")">Add TextMessage</IgbButton>
        </div>
    </div>
</div>

@code {

    /// <summary>
    /// コンポーネント名文字列から、実際のコンポーネントの型 (`Type`) を表引きするための辞書
    /// </summary>
    private static readonly IReadOnlyDictionary<string, Type> _ComponentNameToType =
        new Dictionary<string, Type>
            {
                [nameof(Counter)] = typeof(Counter),
                [nameof(TextMessage)] = typeof(TextMessage),
            };

    /// <summary>
    /// "画面上にどのコンポーネントが表示されているか" を保持するリスト
    /// </summary>
    private readonly List<ComponentDescriptor> _Components = new();

#pragma warning disable BL0005
    /// <summary>
    /// ドックマネージャーの初期レイアウト
    /// </summary>
    private readonly IgbDockManagerLayout _InitialLayout = new IgbDockManagerLayout()
        {
            RootPane = new IgbSplitPane
            {
                PaneType = DockManagerPaneType.SplitPane,
                Orientation = SplitPaneOrientation.Horizontal,
                Panes = new IgbDockManagerPaneCollection()
            }
        };
#pragma warning restore BL0005

    /// <summary>
    /// 最後に購読破棄するために、ドックマネージャーのイベント購読を保持するリスト
    /// </summary>
    private readonly List<IAsyncDisposable> _Subscriptions = new();

    /// <summary>
    /// 描画が完了するたびに呼び出されます (以降、ローカルストレージへのアクセスが可能になります)
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // ブラウザのローカルストレージに JSON 形式で保存しておいた表示コンポーネントの情報を、逆シリアル化して復元
            var components = await this.LocalStorage.GetItemAsync<ComponentDescriptor[]>("components");
            if (components != null) this._Components.AddRange(components);
            this.StateHasChanged();

            // ブラウザのローカルストレージに保存しておいたドックマネージャーのレイアウト情報から、レイアウトを復元
            var layout = await this.LocalStorage.GetItemAsStringAsync("layout");
            if(!string.IsNullOrEmpty(layout)) await this.Helper.RestoreLayoutAsync("#dockmanager1", layout);

            // ドックマネージャーが発行するイベントを購読
            this._Subscriptions.Add(await this.Helper.SubscribeLayoutChangeEventAsync("#dockmanager1", OnLayoutChange));
            this._Subscriptions.Add(await this.Helper.SubscribePaneCloseEventAsync("#dockmanager1", OnPaneClose));
        }
    }

    /// <summary>
    /// ドックマネージャーのレイアウトが変更されたときに呼び出され、変更後のレイアウト情報をブラウザのローカルストレージに保存します。
    /// </summary>
    private async ValueTask OnLayoutChange(string? layout)
    {
        if (layout == null) return;
        await this.LocalStorage.SetItemAsStringAsync("layout", layout);
    }

    /// <summary>
    /// ドックマネージャーのペインが閉じられたときに呼び出され、閉じられたペインに表示していた表示コンポーネントを削除し、ブラウザのローカルストレージに保存します。
    /// </summary>
    private async ValueTask OnPaneClose(string[]? closedPaneIds)
    {
        var componentsToRemove = (closedPaneIds ?? Array.Empty<string>())
            .Select(paneId => this._Components.Find(descriptor => descriptor.Id == paneId))
            .Where(descriptor => descriptor != null)
            .ToArray();
        foreach (var descriptor in componentsToRemove) { this._Components.Remove(descriptor!); }

        await LocalStorage.SetItemAsync("components", this._Components);
        this.StateHasChanged();
    }

    /// <summary>
    /// "Add Counter" ボタンがクリックされたときに呼び出されます。
    /// </summary>
    private async Task OnClickAddCounter()
    {
        var id = Guid.NewGuid().ToString();
        await this.AddComponentAsync(new(id, nameof(Counter), new()));
    }

    /// <summary>
    /// テキスト入力欄にバインドするフィールド変数
    /// </summary>
    private string _Message = "";

    /// <summary>
    /// "Add TextMessage" ボタンがクリックされたときに呼び出されます。
    /// </summary>
    private async Task OnClickAddTextMessage()
    {
        var id = Guid.NewGuid().ToString();
        await this.AddComponentAsync(new(id, nameof(TextMessage), new()
            {
                // ページ上の入力欄に入力されたテキストを、辞書の一項目として追加して渡す
                [nameof(TextMessage.Message)] = this._Message
            }));

        // 1つ TextMessage コンポーネントを追加したら、入力欄はクリアしておく
        this._Message = "";
    }

    /// <summary>
    /// 表示コンポーネントの追加処理を集約します。
    /// </summary>
    private async ValueTask AddComponentAsync(ComponentDescriptor descriptor)
    {
        this._Components.Add(descriptor);

        // ドックマネージャーに、追加した表示コンポーネントを取り付け
        await this.Helper.AttachContentPaneAsync("#dockmanager1", descriptor.Id, descriptor.ComponentName);

        // 表示コンポーネントの情報を、ブラウザのローカルストレージに保存
        await this.LocalStorage.SetItemAsync("components", this._Components);
    }

    /// <summary>
    /// この App コンポーネントが破棄されるときに呼び出され、購読していたドックマネージャーのイベント購読を破棄します。
    /// </summary>
    public async ValueTask DisposeAsync()
    {
        var valueTasks = this._Subscriptions.Select(subscription => subscription.DisposeAsync()).ToArray();
        foreach (var valueTask in valueTasks) await valueTask;
    }
}
